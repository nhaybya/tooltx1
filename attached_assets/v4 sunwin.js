// Variables used by Scriptable.
// These must be at the very top of the file. Do not edit.
// icon-color: light-gray; icon-glyph: hand-holding-usd;
let password = "Nhayydzvcl";
let attemptCount = 0;
let capital = 0;
let initialCapital = 0;
let gameResults = [];
let lastPrediction = null;
let winningStreak = 0;
let totalGames = 0;
let winGames = 0;

async function main() {
  await promptPassword();
}

async function promptPassword() {
  const alert = new Alert();
  alert.title = "üéÆ Nhayy PREMIUM üéÆ";
  alert.message = "‚ö° Phi√™n b·∫£n cao c·∫•p - ƒê·ªôc quy·ªÅn ‚ö°";
  alert.addSecureTextField("üîë Nh·∫≠p m·∫≠t kh·∫©u");
  alert.addAction("‚ú® X√°c Nh·∫≠n");
  alert.addCancelAction("‚ùå Tho√°t");

  const res = await alert.presentAlert();

  if (res === 0) {
    const input = alert.textFieldValue(0);
    if (input === password) {
      await showWelcome();
    } else {
      attemptCount++;
      if (attemptCount >= 2) {
        await showContact();
      } else {
        await showError("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    }
  }
}

async function showWelcome() {
  const alert = new Alert();
  alert.title = "üåü NHAYY PREMIUM üåü";
  alert.message = `
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ú® Ch√†o m·ª´ng tr·ªü l·∫°i!
üí´ Phi√™n b·∫£n: Premium 4.0
üìà T·ªâ l·ªá th·∫Øng: 65-85%
üéØ Thu·∫≠t to√°n: N√¢ng cao
üî• Ch·∫ø ƒë·ªô: Theo d√µi th·ªùi gian th·ª±c
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö° ƒê√£ t√≠ch h·ª£p AI ph√¢n t√≠ch
üé≤ T·ªëi ∆∞u cho Sun.win
üíé B·∫£o v·ªá v·ªën th√¥ng minh
`;
  alert.addAction("üöÄ B·∫Øt ƒë·∫ßu");

  await alert.presentAlert();
  await inputCapital();
}

async function inputCapital() {
  const alert = new Alert();
  alert.title = "üí∞ Nh·∫≠p S·ªë V·ªën";
  alert.message = `
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíé Nh·∫≠p s·ªë ti·ªÅn v·ªën c·ªßa b·∫°n
‚ö° VD: 500k, 1m, 2.5m
üìä H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông:
   ‚Ä¢ Ph√¢n b·ªï v·ªën th√¥ng minh
   ‚Ä¢ B·∫£o v·ªá v·ªën t·ªëi ƒëa
   ‚Ä¢ T·ªëi ∆∞u l·ª£i nhu·∫≠n
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`;
  alert.addTextField("Nh·∫≠p s·ªë ti·ªÅn");
  alert.addAction("‚úÖ X√°c nh·∫≠n");
  alert.addCancelAction("‚ùå Tho√°t");

  const res = await alert.presentAlert();

  if (res === 0) {
    const input = alert.textFieldValue(0).replace(/[^0-9.]/g, '');
    capital = parseFloat(input) * 1000; // Chuy·ªÉn ƒë·ªïi t·ª´ k/m sang ƒë∆°n v·ªã ƒë·ªìng
    initialCapital = capital; // G√°n gi√° tr·ªã ban ƒë·∫ßu
    if (!isNaN(capital) && capital > 0) {
      await startPrediction();
    } else {
      await showError("Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá!");
      await inputCapital();
    }
  }
}

async function startPrediction() {
  const alert = new Alert();
  alert.title = "üé≤ Nh·∫≠p K·∫øt Qu·∫£";
  let message = `
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${gameResults.length === 0 ? 
    "üìù Nh·∫≠p 4 k·∫øt qu·∫£ g·∫ßn nh·∫•t (3-18)\nüí´ VD: 11-9-15-12" :
    `üìä K·∫øt qu·∫£ hi·ªán t·∫°i:\nüé≤ ${gameResults.slice(-3).join('-')}\nüí´ Nh·∫≠p k·∫øt qu·∫£ m·ªõi:`}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${getStats()}
`;
  alert.message = message;
  alert.addTextField("Nh·∫≠p k·∫øt qu·∫£");
  alert.addAction("‚ú® Ph√¢n t√≠ch");
  alert.addCancelAction("‚ùå Tho√°t");

  const res = await alert.presentAlert();

  if (res === 0) {
    const input = alert.textFieldValue(0);
    let numbers;

    if (gameResults.length === 0) {
      numbers = input.split('-').map(n => parseInt(n.trim()));
      if (validateInput(numbers)) {
        gameResults.push(...numbers);
      } else {
        await showError("Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng v·ªõi 4 s·ªë t·ª´ 3 ƒë·∫øn 18, c√°ch nhau b·ªüi d·∫•u '-'!");
        await startPrediction();
        return;
      }
    } else {
      const newNumber = parseInt(input.trim());
      if (validateSingleNumber(newNumber)) {
        if (gameResults.length >= 4) {
          gameResults.shift();
        }
        gameResults.push(newNumber);
        numbers = [...gameResults];
      } else {
        await showError("Vui l√≤ng nh·∫≠p s·ªë t·ª´ 3 ƒë·∫øn 18!");
        await startPrediction();
        return;
      }
    }

    if (numbers && numbers.length === 4) {
      const prediction = analyzePrediction(numbers);
      lastPrediction = prediction;
      await showPrediction(prediction);
    } else {
      await showError("Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng!");
      await startPrediction();
    }
  }
}

function validateInput(numbers) {
  return numbers.length === 4 && numbers.every(n => validateSingleNumber(n));
}

function validateSingleNumber(number) {
  return !isNaN(number) && number >= 3 && number <= 18;
}

function analyzePrediction(numbers) {
  // T√°ch ph·∫ßn t√≠nh to√°n ƒë·ªô tin c·∫≠y v√† lo·∫°i d·ª± ƒëo√°n
  let confidence = 0;
  let type = '';
  let pattern = '';
  let warnings = [];
  let marketTrend = '';
  
  // Ph√¢n t√≠ch AI n√¢ng cao
  const aiAnalysis = analyzeAI(numbers);
  confidence += aiAnalysis.confidence;
  if (aiAnalysis.type) {
    type = aiAnalysis.type;
  }
  if (aiAnalysis.pattern) {
    pattern = aiAnalysis.pattern;
  }

  // Ph√¢n t√≠ch chu k·ª≥
  const cycleAnalysis = analyzeCycle(numbers);
  confidence += cycleAnalysis.confidence;
  if (cycleAnalysis.type && !type) {
    type = cycleAnalysis.type;
  }

  // Ph√¢n t√≠ch th·ªëng k√™
  const statsAnalysis = analyzeStats(numbers);
  confidence += statsAnalysis.confidence;
  if (statsAnalysis.warning) {
    warnings.push(statsAnalysis.warning);
  }

  // Ph√¢n t√≠ch xu h∆∞·ªõng th·ªã tr∆∞·ªùng
  const marketAnalysis = analyzeMarket(numbers);
  confidence += marketAnalysis.confidence;
  marketTrend = marketAnalysis.trend;

  // ƒêi·ªÅu ch·ªânh ƒë·ªô tin c·∫≠y d·ª±a tr√™n l·ªãch s·ª≠
  confidence = adjustConfidence(confidence);

  // S·ªë ƒë·∫∑c bi·ªát v√† g·ª£i √Ω ph·ª•
  let special = null;
  if (confidence >= 57) {
    special = calculateSpecialNumbers(numbers, type);
  }

  // T√≠nh to√°n s·ªë ti·ªÅn c∆∞·ª£c
  const betAmount = calculateBetAmount(confidence);

  return {
    type,
    confidence,
    betAmount,
    special,
    warnings,
    pattern,
    marketTrend
  };
}

function analyzeAI(numbers) {
  const result = {
    type: '',
    confidence: 0,
    pattern: ''
  };

  // Ph√¢n t√≠ch m·∫´u ph·ª©c t·∫°p
  const patterns = [
    { type: 'WAVE', confidence: 15 },
    { type: 'TRIANGLE', confidence: 20 },
    { type: 'REVERSAL', confidence: 35 }
  ];

  for (let p of patterns) {
    if (detectPattern(numbers, p.type)) {
      result.confidence += p.confidence;
      result.pattern = p.type;
      break; // Ch·ªâ l·∫•y m·ªôt m·∫´u ƒë·∫ßu ti√™n match
    }
  }

  // Ph√¢n t√≠ch bi√™n ƒë·ªô dao ƒë·ªông
  const amplitude = Math.max(...numbers) - Math.min(...numbers);
  const volatility = calculateVolatility(numbers);

  if (amplitude > 8 && volatility > 2) {
    result.confidence += 10n;
    result.type = numbers[numbers.length - 1] > 10 ? 'X·ªâu' : 'T√†i';
  }

  return result;
}

function analyzeCycle(numbers) {
  const result = {
    type: '',
    confidence: 0
  };

  // Ph√°t hi·ªán chu k·ª≥
  const cycles = detectCycles(numbers);
  if (cycles.length > 0) {
    result.confidence += 20;
    const prediction = predictNextInCycle(cycles[0], numbers);
    if (prediction) {
      result.type = prediction;
    }
  }

  // Ph√¢n t√≠ch ƒëi·ªÉm ƒë·∫£o chi·ªÅu
  const reversalPoints = findReversalPoints(numbers);
  if (reversalPoints.length >= 2) {
    result.confidence += 17;
    const prediction = predictReversal(reversalPoints, numbers);
    if (prediction) {
      result.type = prediction;
    }
  }

  return result;
}

function analyzeStats(numbers) {
  const result = {
    confidence: 0,
    warning: null
  };

  // Ph√¢n t√≠ch th·ªëng k√™
  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;
  const variance = numbers.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / numbers.length;
  const stdDev = Math.sqrt(variance);

  // Ki·ªÉm tra ƒë·ªô ph√¢n t√°n
  if (stdDev < 2) {
    result.confidence += 20;
    result.warning = "‚ö†Ô∏è Chu·ªói ·ªïn ƒë·ªãnh - Kh·∫£ nƒÉng ƒë·∫£o chi·ªÅu cao";
  } else if (stdDev > 4) {
    result.confidence += 15;
    result.warning = "‚ö†Ô∏è Bi·∫øn ƒë·ªông m·∫°nh - C·∫ßn th·∫≠n tr·ªçng";
  }

  return result;
}

function analyzeMarket(numbers) {
  const result = {
    confidence: 0,
    trend: ''
  };

  // Ph√¢n t√≠ch xu h∆∞·ªõng th·ªã tr∆∞·ªùng
  const trendStrength = calculateTrendStrength(numbers);
  const momentum = calculateMomentum(numbers);

  if (trendStrength > 0.7) {
    result.confidence += 20;
    result.trend = 'STRONG_TREND';
  } else if (momentum > 0.5) {
    result.confidence += 15;
    result.trend = 'MOMENTUM';
  }

  return result;
}

function calculateSpecialNumbers(numbers, predictedType) {
  const result = {
    primary: 0,
    secondary: [],
    avoid: []
  };

  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;
  const lastNum = numbers[numbers.length - 1];

  if (predictedType === 'T√ÄI') {
    result.primary = Math.round(Math.min(18, Math.max(11, mean + 2)));
    result.secondary = [result.primary - 1, result.primary + 1].filter(n => n >= 11 && n <= 18);
    result.avoid = [3, 4, 5, 6, 7];
  } else {
    result.primary = Math.round(Math.max(3, Math.min(10, mean - 2)));
    result.secondary = [result.primary - 1, result.primary + 1].filter(n => n >= 3 && n <= 10);
    result.avoid = [14, 15, 16, 17, 18];
  }

  return result;
}

function calculateBetAmount(confidence) {
  const basePercent = 0.1; // 10% v·ªën c∆° b·∫£n
  const maxPercent = 0.3; // T·ªëi ƒëa 30% v·ªën

  // T√≠nh to√°n h·ªá s·ªë ƒë·∫∑t c∆∞·ª£c
  let multiplier = 1;

  if (confidence >= 80) multiplier = 1.5;
  if (confidence >= 85) multiplier = 2;
  if (winningStreak >= 3) multiplier *= 1.2;

  // √Åp d·ª•ng b·∫£o v·ªá v·ªën
  if (capital < initialCapital * 0.5) multiplier *= 0.5;
  if (capital > initialCapital * 2) multiplier *= 0.8;

  const betPercent = Math.min(basePercent * multiplier, maxPercent);
  return Math.max(50000, Math.floor(capital * betPercent));
}

async function showPrediction(prediction) {
  const alert = new Alert();
  alert.title = "üéØ K·∫æT QU·∫¢ PH√ÇN T√çCH";
  alert.message = `
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${getMarketIndicator(prediction.marketTrend)}
üí´ D·ª± ƒëo√°n: ${prediction.type}
‚≠ê ƒê·ªô tin c·∫≠y: ${prediction.confidence}%
üí∞ G·ª£i √Ω c∆∞·ª£c: ${formatMoney(prediction.betAmount)}

üé≤ S·ªë ƒë·ªÅ xu·∫•t:
   ‚Ä¢ Ch√≠nh: ${prediction.special?.primary ?? 'N/A'}
   ‚Ä¢ Ph·ª•: ${prediction.special?.secondary.join(', ') ?? 'N/A'}
   ‚Ä¢ Tr√°nh: ${prediction.special?.avoid.join(', ') ?? 'N/A'}

üìä Ph√¢n t√≠ch:
   ‚Ä¢ ${prediction.pattern || 'M·∫´u chu·∫©n'}
   ‚Ä¢ ${prediction.warnings.join('\n   ‚Ä¢ ') || 'Kh√¥ng c√≥ c·∫£nh b√°o'}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Nhayy b√°o üó£ : ${getStrength(prediction.confidence)}
`;

  alert.addAction("‚úÖ ƒê·∫∑t c∆∞·ª£c");
  alert.addAction("üîÑ Ph√¢n t√≠ch ti·∫øp");
  alert.addCancelAction("‚ùå Tho√°t");

  const res = await alert.presentAlert();

  if (res === 0) {
    await betResult(prediction);
  } else if (res === 1) {
    await startPrediction();
  }
}

function getMarketIndicator(trend) {
  switch(trend) {
    case 'STRONG_TREND':
      return "üìà Th·ªã tr∆∞·ªùng ƒëang c√≥ xu h∆∞·ªõng m·∫°nh";
    case 'MOMENTUM':
      return "‚ö° ƒê·ªông l·ª±c th·ªã tr∆∞·ªùng t√≠ch c·ª±c";
    default:
      return "üìä Th·ªã tr∆∞·ªùng ·ªïn ƒë·ªãnh";
  }
}

function getStats() {
  if (totalGames === 0) return "";

  const winRate = Math.round((winGames / totalGames) * 100);
  const profitAmount = capital - initialCapital;
  const profitRate = initialCapital > 0 ? Math.round((profitAmount / initialCapital) * 100) : 0;

  return `
üìà Th·ªëng k√™:
   ‚Ä¢ T·ªïng phi√™n: ${totalGames}
   ‚Ä¢ Th·∫Øng: ${winGames}
   ‚Ä¢ T·ªâ l·ªá: ${winRate}%
   ‚Ä¢ L·ª£i nhu·∫≠n: ${formatMoney(profitAmount)} (${profitRate}%)
   ‚Ä¢ Streak: ${winningStreak} th·∫Øng li√™n ti·∫øp
`;
}

async function betResult(prediction) {
  const alert = new Alert();
  alert.title = "üí∞ K·∫æT QU·∫¢ C∆Ø·ª¢C";
  alert.message = `
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
B·∫°n ƒë√£ ƒë·∫∑t ${prediction.type}
üí´ S·ªë g·ª£i √Ω: ${prediction.special?.primary ?? 'N/A'}
‚ö° K·∫øt qu·∫£ th·∫ø n√†o?
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`;
  alert.addAction("‚ú® Th·∫Øng");
  alert.addAction("üíî Thua");
  alert.addAction("üîÑ Ph√¢n t√≠ch l·∫°i");
  alert.addCancelAction("‚ùå Tho√°t");

  const res = await alert.presentAlert();

  if (res === 0 || res === 1) {
    totalGames++;
    if (res === 0) {
      winGames++;
      winningStreak++;
      capital += prediction.betAmount;
      await showWinResult(prediction);
    } else {
      winningStreak = 0;
      capital -= prediction.betAmount;
      await showLoseResult(prediction);
    }
  } else if (res === 2) {
    await showPrediction(lastPrediction);
  }
}

async function showWinResult(prediction) {
  const alert = new Alert();
  alert.title = "üéâ CH√öC M·ª™NG TH·∫ÆNG";
  alert.message = `
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ú® D·ª± ƒëo√°n ch√≠nh x√°c!
üí∞ L·ª£i nhu·∫≠n: +${formatMoney(prediction.betAmount)}
üí´ V·ªën hi·ªán t·∫°i: ${formatMoney(capital)}
üî• Streak: ${winningStreak} th·∫Øng li√™n ti·∫øp
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`;
  alert.addAction("üöÄ Ti·∫øp t·ª•c");
  alert.addCancelAction("‚ùå Tho√°t");

  const res = await alert.presentAlert();
  if (res === 0) {
    await startPrediction();
  }
}

async function showLoseResult(prediction) {
  const alert = new Alert();
  alert.title = "?? TI·∫æC QU√Å";
  alert.message = `
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üò¢ D·ª± ƒëo√°n ch∆∞a ch√≠nh x√°c
üí∏ Thua l·ªó: -${formatMoney(prediction.betAmount)}
üí∞ V·ªën c√≤n l·∫°i: ${formatMoney(capital)}
‚ö° ƒê·ª´ng n·∫£n, ti·∫øp t·ª•c n√†o!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`;
  alert.addAction("üöÄ G·ª° l·∫°i");
  alert.addCancelAction("‚ùå Tho√°t");

  const res = await alert.presentAlert();
  if (res === 0) {
    await startPrediction();
  }
}

function formatMoney(amount) {
  if (amount >= 1000000) {
    return `${(amount / 1000000).toFixed(1)}m`;
  }
  return `${(amount / 1000).toFixed(0)}k`;
}

function getStrength(confidence) {
  if (confidence >= 85) return "ƒëm chu·∫©n b·ªã v·ª©t b√°t üåö";
  if (confidence >= 80) return "C·∫ßu si√™u ƒë·∫πp theo ƒëi üåü";
  if (confidence >= 75) return "n√™n theo ‚ÄºÔ∏è";
  if (confidence >= 70) return "Theo ho·∫∑c kh√¥ng üí§";
  return "B·ªè tay n√†y ‚ùå";
}

// C√°c h√†m ph√¢n t√≠ch b·ªï sung
function calculateVolatility(numbers) {
  const changes = [];
  for (let i = 1; i < numbers.length; i++) {
    changes.push(Math.abs(numbers[i] - numbers[i-1]));
  }
  return changes.reduce((a, b) => a + b, 0) / changes.length;
}

function calculateTrendStrength(numbers) {
  const trend = numbers[numbers.length - 1] - numbers[0];
  return numbers.length > 1 ? Math.abs(trend) / (numbers.length - 1) : 0;
}

function calculateMomentum(numbers) {
  if (numbers.length < 2) return 0;
  const recentChange = numbers[numbers.length - 1] - numbers[numbers.length - 2];
  const totalChange = numbers[numbers.length - 1] - numbers[0];
  const avgChange = numbers.length > 1 ? totalChange / (numbers.length - 1) : 0;
  return avgChange !== 0 ? Math.abs(recentChange / avgChange) : 0;
}

function detectPattern(numbers, type) {
  switch(type) {
    case 'WAVE':
      return detectWavePattern(numbers);
    case 'TRIANGLE':
      return detectTrianglePattern(numbers);
    case 'REVERSAL':
      return detectReversalPattern(numbers);
    default:
      return false;
  }
}

function detectWavePattern(numbers) {
  let changes = [];
  for (let i = 1; i < numbers.length; i++) {
    changes.push(numbers[i] - numbers[i-1]);
  }
  return changes.some(c => c > 0) && changes.some(c => c < 0);
}

function detectTrianglePattern(numbers) {
  const lastThree = numbers.slice(-3);
  const highs = Math.max(...lastThree);
  const lows = Math.min(...lastThree);
  return (highs - lows) <= 3;
}

function detectReversalPattern(numbers) {
  const start = numbers[0];
  const end = numbers[numbers.length - 1];
  return Math.abs(end - start) >= 4;
}

function findReversalPoints(numbers) {
  const points = [];
  for (let i = 1; i < numbers.length - 1; i++) {
    if ((numbers[i] > numbers[i-1] && numbers[i] > numbers[i+1]) ||
        (numbers[i] < numbers[i-1] && numbers[i] < numbers[i+1])) {
      points.push(i);
    }
  }
  return points;
}

function detectCycles(numbers) {
  const cycles = [];
  // T√¨m chu k·ª≥ d·ª±a tr√™n kho·∫£ng c√°ch gi·ªØa c√°c ƒëi·ªÉm ƒë·∫£o chi·ªÅu
  const reversalPoints = findReversalPoints(numbers);
  if (reversalPoints.length >= 2) {
    const cycleLengths = [];
    for (let i = 1; i < reversalPoints.length; i++) {
      cycleLengths.push(reversalPoints[i] - reversalPoints[i-1]);
    }
    if (new Set(cycleLengths).size === 1) {
      cycles.push({
        length: cycleLengths[0],
        points: reversalPoints
      });
    }
  }
  return cycles;
}

function predictNextInCycle(cycle, numbers) {
  if (cycle.points.length < 2) return null;
  const lastIndex = cycle.points[cycle.points.length - 1];
  const secondLastIndex = cycle.points[cycle.points.length - 2];
  const lastPoint = numbers[lastIndex];
  const secondLastPoint = numbers[secondLastIndex];
  return lastPoint > secondLastPoint ? 'X·ªàU' : 'T√ÄI';
}

function predictReversal(points, numbers) {
  if (points.length < 2) return null;
  const lastPoint = numbers[points[points.length - 1]];
  const currentValue = numbers[numbers.length - 1];
  return currentValue > lastPoint ? 'X·ªàU' : 'T√ÄI';
}

function adjustConfidence(confidence) {
  // ƒêi·ªÅu ch·ªânh ƒë·ªô tin c·∫≠y d·ª±a tr√™n l·ªãch s·ª≠
  let adjusted = confidence;

  if (winningStreak >= 3) {
    adjusted = Math.min(85, adjusted + 5);
  }

  if (totalGames > 0) {
    const winRate = winGames / totalGames;
    if (winRate >= 0.7) {
      adjusted = Math.min(85, adjusted + 3);
    } else if (winRate <= 0.3) {
      adjusted = Math.max(65, adjusted - 3);
    }
  }

  return Math.round(adjusted);
}

async function showError(message = "C√≥ l·ªói x·∫£y ra!") {
  const alert = new Alert();
  alert.title = "‚ö†Ô∏è L·ªñI";
  alert.message = message;
  alert.addAction("üîÑ Th·ª≠ l·∫°i");
  await alert.presentAlert();
}

async function showContact() {
  const alert = new Alert();
  alert.title = "‚ö†Ô∏è C·∫¢NH B√ÅO";
  alert.message = `
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ùå B·∫°n ƒë√£ nh·∫≠p sai m·∫≠t kh·∫©u qu√° nhi·ªÅu l·∫ßn!
üì± Vui l√≤ng li√™n h·ªá admin
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`;
  alert.addAction("üì± Li√™n h·ªá");
  alert.addAction("üîÑ Th·ª≠ l·∫°i");

  const res = await alert.presentAlert();
  if (res === 0) {
    Safari.open("https://facebook.com/Nhayydzvcll");
  } else {
    attemptCount = 0;
    await promptPassword();
  }
}

await main();
